// Code generated by templ@v0.2.364 DO NOT EDIT.

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"strconv"

	helpers "github.com/pmwals09/yobs/internal"
	"github.com/pmwals09/yobs/internal/models/document"
)

func AttachmentsSection(od helpers.OpptyDetails, userDocuments []document.Document, f helpers.FormData) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<section id=\"attachments-section\" class=\"mb-4\"><h2 class=\"text-[1.5em]\">")
		if err != nil {
			return err
		}
		var_2 := `Attachments`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2>")
		if err != nil {
			return err
		}
		if od.Documents != nil && len(od.Documents) > 0 {
			_, err = templBuffer.WriteString("<table class=\"table-auto border-collapse w-full mb-4\"><thead><tr><th class=\"border-b text-left\">")
			if err != nil {
				return err
			}
			var_3 := `Title`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><th class=\"border-b text-left\">")
			if err != nil {
				return err
			}
			var_4 := `Type`
			_, err = templBuffer.WriteString(var_4)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><th class=\"border-b text-left\">")
			if err != nil {
				return err
			}
			var_5 := `File Name`
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th></tr></thead><tbody>")
			if err != nil {
				return err
			}
			for _, doc := range od.Documents {
				_, err = templBuffer.WriteString("<tr class=\"hover:bg-sky-100\"><td class=\"border-b\">")
				if err != nil {
					return err
				}
				var var_6 string = doc.Title
				_, err = templBuffer.WriteString(templ.EscapeString(var_6))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td><td class=\"border-b\">")
				if err != nil {
					return err
				}
				var var_7 string = string(doc.Type)
				_, err = templBuffer.WriteString(templ.EscapeString(var_7))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td><td class=\"border-b\"><a href=\"{ doc.URL }\">")
				if err != nil {
					return err
				}
				var var_8 string = doc.FileName
				_, err = templBuffer.WriteString(templ.EscapeString(var_8))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</a></td></tr>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</tbody></table>")
			if err != nil {
				return err
			}
		}
		err = UnsafeRawHtml(f.Errors["document-table"]).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if userDocuments != nil && len(userDocuments) > 0 {
			_, err = templBuffer.WriteString("<form method=\"POST\" action=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(insertIDIntoString("/opportunities/{}/attach-existing", od.Oppty.ID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-post=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(insertIDIntoString("/opportunities/{}/attach-existing", od.Oppty.ID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-target=\"#attachments-section\" class=\"w-1/2\"><section class=\"grid grid-cols-2 gap-y-2\"><label for=\"existing-attachment\">")
			if err != nil {
				return err
			}
			var_9 := `Existing Attachments`
			_, err = templBuffer.WriteString(var_9)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><div><select name=\"existing-attachment\"><option value=\"\">")
			if err != nil {
				return err
			}
			var_10 := `Select a document...`
			_, err = templBuffer.WriteString(var_10)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
			for _, doc := range userDocuments {
				_, err = templBuffer.WriteString("<option value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(strconv.Itoa(int(doc.ID))))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_11 string = doc.Title
				_, err = templBuffer.WriteString(templ.EscapeString(var_11))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				var_12 := `- `
				_, err = templBuffer.WriteString(var_12)
				if err != nil {
					return err
				}
				var var_13 string = doc.FileName
				_, err = templBuffer.WriteString(templ.EscapeString(var_13))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</option>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</select>")
			if err != nil {
				return err
			}
			err = UnsafeRawHtml(f.Errors["existing-attachment"]).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></section><input type=\"submit\" name=\"attachment-submit\" value=\"Add attached\" class=\"bg-gray-400 px-4 py-2 rounded-full mx-auto block hover:cursor-pointer my-3\"></form>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<form method=\"POST\" action=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(insertIDIntoString("/opportunities/{}/upload", od.Oppty.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(insertIDIntoString("/opportunities/{}/upload", od.Oppty.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"#attachments-section\" enctype=\"multipart/form-data\" class=\"w-1/2\"><section class=\"grid grid-cols-2 gap-y-2\"><label for=\"attachment-name\">")
		if err != nil {
			return err
		}
		var_14 := `Attachment Name`
		_, err = templBuffer.WriteString(var_14)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><div><input type=\"text\" name=\"attachment-name\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(f.Values["attachment-name"]))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		err = UnsafeRawHtml(f.Errors["attachment-name"]).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><label for=\"attachment-type\">")
		if err != nil {
			return err
		}
		var_15 := `Attachment Type`
		_, err = templBuffer.WriteString(var_15)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><div><select name=\"attachment-type\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(f.Values["attachment-type"]))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><option value=\"Resume\">")
		if err != nil {
			return err
		}
		var_16 := `Resume`
		_, err = templBuffer.WriteString(var_16)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"CoverLetter\">")
		if err != nil {
			return err
		}
		var_17 := `Cover Letter`
		_, err = templBuffer.WriteString(var_17)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"Communication\">")
		if err != nil {
			return err
		}
		var_18 := `Communication`
		_, err = templBuffer.WriteString(var_18)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option></select>")
		if err != nil {
			return err
		}
		err = UnsafeRawHtml(f.Errors["attachment-type"]).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><label for=\"attachment-file\">")
		if err != nil {
			return err
		}
		var_19 := `PDF Attachment`
		_, err = templBuffer.WriteString(var_19)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><div><input type=\"file\" name=\"attachment-file\" accept=\".pdf\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(f.Values["attachment-file"]))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		err = UnsafeRawHtml(f.Errors["attachment-file"]).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></section><input type=\"submit\" name=\"attachment-submit\" value=\"Submit new\" class=\"bg-gray-400 px-4 py-2 rounded-full mx-auto block hover:cursor-pointer mt-3\"></form></section>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
