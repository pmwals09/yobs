// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.680
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Modal(containerID string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"relative z-10\"><div class=\"fixed inset-0 bg-gray-500 bg-opacity-75\"><div class=\"flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0\"><div class=\"relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg\" id=\"modal-body\"><div class=\"relative bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4\"><svg version=\"1.1\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:ev=\"http://www.w3.org/2001/xml-events\" width=\"100\" height=\"100\" viewBox=\"0 0 50 50\" class=\"absolute top-2 right-2 w-8 h-8 hover:cursor-pointer\" id=\"modal-close-icon\"><circle stroke=\"black\" cx=\"25\" cy=\"25\" r=\"24\" stroke-width=\"2\" fill=\"none\"></circle> <line x1=\"12\" y1=\"12\" x2=\"38\" y2=\"38\" stroke=\"black\" stroke-width=\"2\"></line> <line x1=\"38\" y1=\"12\" x2=\"12\" y2=\"38\" stroke=\"black\" stroke-width=\"2\"></line></svg>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div></div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = modalListeners(containerID).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func modalListeners(containerID string) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_modalListeners_40da`,
		Function: `function __templ_modalListeners_40da(containerID){(() => {
const closeIcon = document.querySelector("#modal-close-icon")
closeIcon.addEventListener("click", handleClose)
function handleClose(e) {
closeIcon.removeEventListener("click", handleClose)
const container = document.querySelector(` + "`" + `#${containerID}` + "`" + `)
console.log(container)
container.innerHTML = ""
}

document.addEventListener("click", handleBackgroundClose)
function handleBackgroundClose(e) {
const modalBody = document.querySelector("#modal-body")
if (!modalBody.contains(e.target)) {
document.removeEventListener("click", handleBackgroundClose)
const container = document.querySelector(` + "`" + `#${containerID}` + "`" + `)
container.innerHTML = ""
}
}
})()
}`,
		Call:       templ.SafeScript(`__templ_modalListeners_40da`, containerID),
		CallInline: templ.SafeScriptInline(`__templ_modalListeners_40da`, containerID),
	}
}
